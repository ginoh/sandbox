apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildkit-daemonless
  annotations:
    container.apparmor.security.beta.kubernetes.io/step-build-and-push: unconfined
spec:
  results:
    - name: imageNameWithTag
      description: The name with tag of the image to build (e.g. image:latest)
    - name: imageNameWithDigest
      description: The name with digest of the image to build (e.g. image:@sha256xxx...)
    - name: imageShortNameWithTag
      description: The name with tag of the image without registry host to build (for Dev)
  workspaces:
    - name: source
  params:
    - name: pathToDockerfile
      description: The path to the Dockerfile
      default: Dockerfile
    - name: imageRegistryHostName
      description: The HostName of the imageRegistry (e.g. myregistry:5000)
      default: "registry-1.docker.io"
    - name: imageShortName
      description: The name of the image without registry host to build
    - name: imageTag
      description: The tag of the image to build
      default: latest
    - name: BUILDKIT_IMAGE
      description: The name of the BuildKit image
      default: moby/buildkit:master-rootless
    - name: insecureRegistry
      description: The flag to use insecure HTTP registry
      default: false
    - name: credentialDirectory
      description: The directory name placed credential to push image
      default: ~/.docker
  steps:
    - name: build-and-push
      image: $(params.BUILDKIT_IMAGE)
      workingDir: $(workspaces.source.path)
      command:
        - buildctl-daemonless.sh
      args: [
          "--debug",
          "build",
          "--progress",
          "plain",
          "--frontend",
          "dockerfile.v0",
          "--opt",
          "filename=$(params.pathToDockerfile)",
          "--local",
          "context=.",
          "--local",
          "dockerfile=.",
          "--output",
          "type=image,name=$(params.imageRegistryHostName)/$(params.imageShortName):$(params.imageTag),push=true,registry.insecure=$(params.insecureRegistry)",
          "--export-cache",
          #"type=registry,ref=$(params.imageRegistryHostName)/$(params.imageShortName):buildcache",
          "type=inline",
          "--import-cache",
          #"type=registry,ref=$(params.imageRegistryHostName)/$(params.imageShortName):buildcache",
          "type=registry,ref=$(params.imageRegistryHostName)/$(params.imageShortName)",
          "--metadata-file",
          "metadata.json",
        ]
      env:
        - name: BUILDKITD_FLAGS
          value: --oci-worker-no-process-sandbox
        - name: DOCKER_CONFIG
          value: $(params.credentialDirectory)
      securityContext:
        seccompProfile:
          type: Unconfined
    - name: resolve-image-name
      image: stedolan/jq
      script: |
        digest=`jq -r '.["containerimage.digest"]' $(workspaces.source.path)/metadata.json`
        echo "imageNameWithTag:"
        echo -n $(params.imageRegistryHostName)/$(params.imageShortName):$(params.imageTag) | tee $(results.imageNameWithTag.path)
        echo "imageNameWithDigest:"
        echo -n $(params.imageRegistryHostName)/$(params.imageShortName)@$digest | tee $(results.imageNameWithDigest.path)
        echo "imageShortNameWithTag:"
        echo -n $(params.imageShortName):$(params.imageTag) | tee $(results.imageShortNameWithTag.path)
